/* Sample colours from flat UI design */
$monza_red: #CF000F; //207, 0, 15
$plum: #913D88; //145, 61, 136
$royal_blue: #4183D7; //65, 131, 215
$eucalyptus: #26A65B; //38, 166, 91
$lemon: #F7CA18; //247, 202, 24
$burnt_orange:#D35400; //211, 84, 0
$lynch_grey: #6C7A89; //108, 122, 137
$iron: #DADFE1; //218, 223, 225
$white_smoke: #ECECEC;

/* Prefix ready mixins */
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

/* Typography Mixins */
$font-family: 'open sans', lato, sans-serif;

@mixin para-type($font-family) {
     margin-bottom: 20px;
     font-size: 14px;
     line-height: 1.6em;
     font-family: $font-family;
}

@mixin main-head($font-family){
    font-size: 24px;
    line-height: 1.6em;
    font-family: $font-family;
}

/* Hover state transitions */





/* Colour Palette using lighten and darken */



/* Flexbox made easy */


/* Base flex container, edit into mixin*/
.flex-container{
  padding: 0;
  margin: 0;
  list-style: none;
  
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  
  -webkit-flex-flow: row wrap;
  justify-content: space-around;

  /*
  * The main values are the "display", "flex-flow" and "justify-content"
  *
  */
}

/**
  1st option: flex;
  2nd option: ;
*/

/*
  Options for the name value pairs 
  
  flex-direction: | row | row-reverse | column | column-reverse |;
  justify-content: | flex-start | flex-end | center | space-between | space-around |;
*/

@mixin flex-container($display, $flex-flow, $justify-content){
  display: $dispay;
  -webkit-flex-flow: $flex-flow;
  justify-content: $justify-content;
}

.flex-item{
  background: tomato;
  padding: 5px;
  width: 200px;
  height: 150px;
  margin-top: 10px;
  
  line-height: 150px;
  color: white;
  font-weight: bold;
  font-size: 3em;
  text-align: center;
}


/*SASS Number Functions*/
.number-functions{
  width:random([$limit]); //returns a random number up to the specified limit

  height:abs($number); //returns abslute value of a number

  min-width:min($numbers); //Find minimum of several numbers

  max-width:max($numbers); //Find maximum of several numbers

  font-size:floor($number);

  font-size:ceil($number);

  font-size:round($number);
}

/*http://sass-lang.com/documentation/Sass/Script/Functions.html*/
.list-functions{
  length($list); //returns the length of the list
  nth($list, $n); returns specific item in a list
  set-nth($list, $n, $value) //replaces the nth item in a list
  join($list1, list2, [$separator]) //joins two lists into one
  append($list1, list2, [$separator]) //appeands a single value onto the end of a list
  zip($lists) //Combines several lists into a single multidimensional list
  index($list, $value) //returns the position of a value within a list
  list-separator($list) //returns the separator of a list
}